AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  WorkshopName:
    Type: String

  ParentZone:
    Type: String
    Default: awsworkshop.io

  GitHubUsername:
    Type: String

  GitHubOAuthToken:
    Type: String
    NoEcho: true

  GitHubRepository:
    Type: String

  GitHubBranch:
    Type: String

Outputs:
  WebsiteURL:
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: !Sub "${AWS::StackName}-WebURL"

  WebsiteARN:
    Value: !GetAtt WebsiteBucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-WebARN"

  WebsiteBucket:
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub "${AWS::StackName}-WebBucket"

  CodeURL:
    Value: !Sub "https://s3.amazonaws.com/${CodeBucket}"
    Export:
      Name: !Sub "${AWS::StackName}-CodeURL"

  WorkshopDNSZoneId:
    Value: !Ref WorkshopDNSZone
    Export:
      Name: !Sub "${AWS::StackName}-ZoneId"

  WorkshopNameServers:
    Value:
      !Join [
        "",
        [
          !Ref WorkshopName,
          ".",
          !Ref ParentZone,
          " Nameservers: ",
          !Select [0, !GetAtt WorkshopDNSZone.NameServers],
          ", ",
          !Select [1, !GetAtt WorkshopDNSZone.NameServers],
          ", ",
          !Select [2, !GetAtt WorkshopDNSZone.NameServers],
          ", ",
          !Select [3, !GetAtt WorkshopDNSZone.NameServers],
        ],
      ]
    Export:
      Name: !Sub "${AWS::StackName}-NSRecord"

  ACMCertificateARN:
    Description: ACM Certificate ARN
    Value: !GetAtt ACMCertificate.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ACMArn"

Resources:
  # Create Three S3 Buckets for the Website, Code to be used by Workshop participants, and the Code Pipeline Artifacts
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html

  CodeBucket:
    Type: AWS::S3::Bucket

  ArtifactStore:
    Type: AWS::S3::Bucket

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStore
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: !Ref GitHubUsername
                OAuthToken: !Ref GitHubOAuthToken
                Repo: !Ref GitHubRepository
                Branch: !Ref GitHubBranch
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: WebsiteArtifact
                - Name: CodeArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: deploy-website-to-s3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              InputArtifacts:
                - Name: WebsiteArtifact
              Configuration:
                Extract: true
                BucketName: !Ref WebsiteBucket
              RunOrder: 1
            - Name: deploy-code-to-s3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              InputArtifacts:
                - Name: CodeArtifact
              Configuration:
                Extract: true
                BucketName: !Ref CodeBucket
              RunOrder: 1

            - Name: update-web-s3-public-acl
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              InputArtifacts:
                - Name: WebsiteArtifact
              Configuration:
                FunctionName: !GetAtt CodePipelineWebsiteS3ObjectsPublicRead.Outputs.PublicReadAclFunctionName
              RunOrder: 2
            - Name: update-code-s3-public-acl
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              InputArtifacts:
                - Name: CodeArtifact
              Configuration:
                FunctionName: !GetAtt CodePipelineCodeS3ObjectsPublicRead.Outputs.PublicReadAclFunctionName
              RunOrder: 2

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/python:3.7.1"
        ImagePullCredentialsType: CODEBUILD
        EnvironmentVariables:
          - Name: HUGO_S3_CFN_BUCKET
            Value: !Sub "${CodeBucket}"
      Source:
        Type: CODEPIPELINE

  CodePipelineWebsiteS3ObjectsPublicRead:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:068896461592:applications/codepipeline-s3-objects-public-read
        SemanticVersion: 0.0.3
      Parameters:
        S3BucketParameter: !Ref WebsiteBucket
        BuildArtifactParameter: WebsiteArtifact

  CodePipelineCodeS3ObjectsPublicRead:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:us-east-1:068896461592:applications/codepipeline-s3-objects-public-read
        SemanticVersion: 0.0.3
      Parameters:
        S3BucketParameter: !Ref CodeBucket
        BuildArtifactParameter: CodeArtifact
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "codepipeline.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CodePipeline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource:
                  - !GetAtt ArtifactStore.Arn
              - Effect: Allow
                Action:
                  - "cloudformation:GetTemplate"
                  - "cloudformation:DescribeStackResource"
                  - "cloudformation:DescribeStackResources"
                  - "cloudformation:DescribeStackEvents"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:UpdateStack"
                  - "sns:ListSubscriptionsByTopic"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lambda:invokefunction"
                  - "lambda:listfunctions"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "codebuild.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CodeBuild
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource: "*"

  ## Create the Custom Resource Lambda that requests Amazon Certificate Manager Cert for your workshop and crease DNS Validation Record in your Zone

  ACMValidateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: seibeast
        S3Key: ACMValidateFunction.zip
      FunctionName: !Sub "${WorkshopName}-ACMValidateFunction"
      Handler: acm_autovalidate.handler
      Role:
        Fn::GetAtt:
          - ACMValidateRole
          - Arn
      Runtime: python3.6

  ACMValidateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - acm:DescribeCertificate
                  - acm:ListCertificates
                  - acm:RequestCertificate
                  - acm:DeleteCertificate
                  - route53:ListHostedZonesByName
                  - route53:ChangeResourceRecordSets
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: !Sub "${WorkshopName}-ACMandRoute53Access"

  # Create the DNS Zone

  WorkshopDNSZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Join ["", ["Hosted zone for ", !Ref "WorkshopName"]]
      Name: !Join [".", [Ref: WorkshopName, Ref: ParentZone]]
      HostedZoneTags:
        - Key: Workshop
          Value: !Ref WorkshopName

  # Create the ACM Cert for www.workshop.parentzone and workshop.parentzone

  ACMCertificate:
    DependsOn: WorkshopDNSZone
    Type: Custom::ACMAutoValidate
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - ACMValidateFunction
          - Arn
      zoneid: !Ref WorkshopDNSZone
      domainname: !Join [".", ["www", Ref: WorkshopName, Ref: ParentZone]]
      additionalnames:
        - !Join [".", [Ref: WorkshopName, Ref: ParentZone]]
